import dotenv from 'dotenv'
dotenv.config()

import { Client, GatewayIntentBits } from 'discord.js'
import { GoogleGenerativeAI } from '@google/generative-ai'
import fs from 'fs-extra'
import path from 'path'

const client = new Client({
  intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent]
})

const YOUR_DISCORD_BOT_TOKEN = process.env.YOUR_DISCORD_BOT_TOKEN
if (!YOUR_DISCORD_BOT_TOKEN) {
  throw new Error('YOUR_DISCORD_BOT_TOKEN is not set in .env file')
}

// Gemini API key
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY
if (!GOOGLE_API_KEY) {
  throw new Error('GOOGLE_API_KEY is not set in .env file')
}

// T·∫°o Gemini AI instance
const genAI = new GoogleGenerativeAI(GOOGLE_API_KEY)
const model = genAI.getGenerativeModel({ model: 'gemini-2.5-flash' })

const CHAT_HISTORY_DIR = path.join(process.cwd(), 'chat_histories')
fs.ensureDirSync(CHAT_HISTORY_DIR)

const MAX_HISTORY_LENGTH = 50

// Load history by channel
async function loadHistory(channelId: string) {
  const filePath = path.join(CHAT_HISTORY_DIR, `${channelId}.json`)
  if (await fs.pathExists(filePath)) {
    return await fs.readJSON(filePath)
  }

  // New history with correct structure
  return []
}

interface ChatHistory {
  role: string
  parts: { text: string }[]
}

function trimHistory(history: ChatHistory[], maxLength: number): ChatHistory[] {
  // L·∫•y ƒëo·∫°n cu·ªëi sao cho ƒëo·∫°n ƒë√≥ b·∫Øt ƒë·∫ßu b·∫±ng user
  for (let start = history.length - maxLength; start < history.length; start++) {
    if (history[start] && history[start].role === 'user') {
      return history.slice(start)
    }
  }
  // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c user, tr·∫£ v·ªÅ to√†n b·ªô history
  return history
}

// Save history, trim to max
async function saveHistory(channelId: string, history: ChatHistory[]) {
  const trimmed = trimHistory(history, MAX_HISTORY_LENGTH)
  const filePath = path.join(CHAT_HISTORY_DIR, `${channelId}.json`)
  await fs.writeJSON(filePath, trimmed, { spaces: 2 })
}

client.on('messageCreate', async (message) => {
  // B·ªè qua bot
  if (message.author.bot) return

  // Ki·ªÉm tra nh·∫Øc ƒë·∫øn b·∫°n
  const isMentioned = message.mentions.users.find(
    (user) => user.username === 'nguyenle9292' || user.id === '1399976425221521538'
  )

  try {
    const channelId = message.channelId
    const prompt = message.content

    const history: ChatHistory[] = await loadHistory(channelId)
    if (!Array.isArray(history)) {
      throw new Error(`L·ªãch s·ª≠ h·ªôi tho·∫°i kh√¥ng h·ª£p l·ªá cho k√™nh ${channelId}`)
    }

    if (!isMentioned) {
      // C·∫≠p nh·∫≠t l·ªãch s·ª≠ m·ªõi
      history.push({ role: 'user', parts: [{ text: prompt }] })
      await saveHistory(channelId, history)
      return
    }

    // T·∫°o cu·ªôc h·ªôi tho·∫°i c√≥ s·∫µn l·ªãch s·ª≠
    const chat = model.startChat({ history })

    const promptOptions = {
      responseFormat:
        "B·∫°n l√† tr∆∞·ªüng nh√≥m t√™n Heo C∆°. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n quen, pha ch√∫t c√† kh·ªãa nh·∫π. X∆∞ng 'anh' ho·∫∑c 'kh·∫ßy'. Ch√™m emoji, catchphrase ho·∫∑c bi·ªÉu c·∫£m quen thu·ªôc (=)), =]], ü§£) th·ªânh tho·∫£ng. Kh√¥ng d√†i d√≤ng, gi·ªØ vibe chat nh√≥m b·∫°n b√®.",
      catchphrases: ['=))', '=]]', 'vl', 'kkk', 'ü§£']
    }

    const result = await chat.sendMessage(`prompt: ${prompt}, ${JSON.stringify(promptOptions)} `)
    let text = ''
    if ('response' in result && typeof result.response?.text === 'function') {
      text = result.response.text()
    } else if ('text' in result && typeof result.text === 'string') {
      // fallback n·∫øu API tr·∫£ th·∫≥ng chu·ªói (hi·∫øm nh∆∞ng c√≥ th·ªÉ)
      text = result.text
    } else {
      throw new Error('Kh√¥ng th·ªÉ ƒë·ªçc ph·∫£n h·ªìi t·ª´ Gemini')
    }

    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ m·ªõi
    history.push({ role: 'user', parts: [{ text: prompt }] })
    history.push({ role: 'model', parts: [{ text }] })
    await saveHistory(channelId, history)

    await message.reply(text)
  } catch (err) {
    console.error('L·ªói khi x·ª≠ l√Ω message:', err)
    await message.reply('‚ùå Xin l·ªói, anh g·∫∑p l·ªói khi x·ª≠ l√Ω tin nh·∫Øn n√†y.')
  }
})

client.login(YOUR_DISCORD_BOT_TOKEN)
